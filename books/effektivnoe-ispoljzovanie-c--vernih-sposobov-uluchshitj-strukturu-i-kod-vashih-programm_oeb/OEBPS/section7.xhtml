---
layout: page
title: "Эффективное использование C++. 55 верных способов улучшить структуру и код ваших программ"
prev: OEBPS/section6.xhtml
next: OEBPS/section8.xhtml
book_path: books/effektivnoe-ispoljzovanie-c--vernih-sposobov-uluchshitj-strukturu-i-kod-vashih-programm_oeb/
---
{% include JB/setup %}
{% raw %}
<div>

    <div class="calibre">
      <div class="title1">
        <h2 class="calibre3">Терминология</h2>
      </div>
      <p class="calibre2">Существует небольшой словарик C++, которым должен владеть каждый программист. Следующие термины достаточно важны, поэтому имеет смысл убедиться, что мы понимаем их одинаково.</p>
      <p class="calibre2">
        <strong class="calibre4">Объявление</strong> (declaration) сообщает компилятору имя и тип чего-либо, опуская некоторые детали. Объявления выглядят так:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">extern int x; // объявление объекта</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::size_t numDigits(int number); // объявление функции</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">class Widget; // объявление класса</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">template&lt;typename T&gt; // объявление шаблона</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">
          <code class="calibre7">class GraphNode; // (см. правило 42 о том, что такое «typename»</code>
        </code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Заметьте, что я называю целое число x «объектом», несмотря на то что это переменная встроенного типа. Некоторые люди под «объектами» понимают только переменные пользовательских типов, но я не принадлежу к их числу. Также отметим, что функция numDigits() возвращает тип std::size_t, то есть тип size_t из пространства имен std. Это то пространство имен, в котором находится почти все из стандартной библиотеки C++. Однако, поскольку стандартная библиотека C (точнее говоря, С89) также может быть использована в программе на C++, символы, унаследованные от C (такие как size_t), могут существовать в глобальном контексте, внутри std, либо в обоих местах, в зависимости от того, какие заголовочные файлы были включены директивой #include. В этой книге я предполагаю, что с помощью #include включаются заголовочные файлы C++. Вот почему я употребляю std::size_t, а не просто size_t. Когда я упоминаю компоненты стандартной библиотеки вне текста программы, то обычно опускаю ссылку на std, полагая, что вы знаете, что такие вещи, как size_t, vector и cout, находятся в пространстве имен std. В примерах же программ я всегда включаю std, потому что в противном случае код не скомпилируется.</p>
      <p class="calibre2">Кстати, size_t – это всего-навсего определенный директивой typedef синоним для некоторых беззнаковых типов, которые в C++ используются для разного рода счетчиков (например, количества символов в строках типа char*, количества элементов в контейнерах STL и т. п.). Это также тип, принимаемый функциями operator[] в векторах (vector), деках (deque) и строках (string). Этому соглашению мы будем следовать и при определении наших собственных функций operator[] в правиле 3.</p>
      <p class="calibre2">В любом объявлении функции указывается ее <strong class="calibre4">сигнатура,</strong> то есть типы параметров и возвращаемого значения. Можно сказать, что сигнатура функции – это ее тип. Так, сигнатурой функции numDigits является std::size_t(int), иными словами, это «функция, принимающая int и возвращающая std::size_t». Официальное определение «сигнатуры» в C++ не включает тип возвращаемого функцией значения, но в этой книге нам будет удобно считать, что он все же является частью сигнатуры.</p>
      <p class="calibre2">
        <strong class="calibre4">Определение</strong> (definition) сообщает компилятору детали, которые опущены в объявлении. Для объекта определение – это то место, где компилятор выделяет для него память. Для функции или шаблона функции определение содержит тело функции. В определении класса или шаблона класса перечисляются его члены:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">int x; // определение объекта</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::size_t numDigits(int number) // определение функции</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">{ // (эта функция возвращает количество</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::size_t digitsSoFar = 1; // десятичных знаков в своем параметре)</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">while((number /= 10) != 0) ++digitsSoFar;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">return digitsSoFar;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">}</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">class Widget { // определение класса</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">public:</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget();</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">~Widget();</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">...</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">};</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">template&lt;typename T&gt; // определение шаблона</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">class GraphNode {</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">public:</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">GraphNode();</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">~GraphNode();</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">...</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">};</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <strong class="calibre4">Инициализация</strong> (initialization) – это процесс присваивания объекту начального значения. Для объектов пользовательских типов инициализация выполняется конструкторами. <strong class="calibre4">Конструктор по умолчанию</strong> (default constructor) – это конструктор, который может быть вызван без аргументов. Такой конструктор либо не имеет параметров вовсе, либо имеет значение по умолчанию для каждого параметра:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">class A {</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">public:</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">A(); // конструктор по умолчанию</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">};</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">class B {</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">public:</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">explicit B(int x = 0; bool b = true); // конструктор по умолчанию,</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">}; // см. далее объяснение</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// ключевого слова “explicit”</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">class C {</code>
      </p>
      <p class="calibre2">public:</p>
      <p class="calibre2">
        <code class="calibre7">explicit C(int x); // это не конструктор по</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">
          <code class="calibre7">// умолчанию</code>
        </code>
      </p>
      <p class="calibre2">
        <code class="calibre7">};</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Конструкторы классов B и C объявлены в ключевым словом explicit (явный). Это предотвращает их использование для неявных преобразований типов, хотя не запрещает применения, если преобразование указано явно:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">void doSomething(B bObject); // функция принимает объект типа B</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">B bObj1; // объект типа B</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">doSomething(bObj1); // нормально, B передается doSomething</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">B bObj(28); // нормально, создает B из целого 28</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// (параметр bool по умолчанию true)</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">doSomething(28); // ошибка! doSomething принимает B,</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// а не int, и не существует неявного</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// преобразования из int в B</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">doSomething(B(28)); // нормально, используется конструктор</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// B для явного преобразования (приведения)</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// int в B (см. в правиле 27 информацию</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// о приведении типов)</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Конструкторы, объявленные как explicit, обычно более предпочтительны, потому что предотвращают выполнение компиляторами неявных преобразований типа (часто нежелательных). Если нет основательной причины для использования конструкторов в неявных преобразованиях типов, я всегда объявляю их explicit. Советую и вам придерживаться того же принципа.</p>
      <p class="calibre2">Обратите внимание, что в предшествующем примере приведение выделено. Я и дальше буду использовать такое выделение, чтобы подчеркнуть важность излагаемого материала. (Также я выделяю номера глав, но это только потому, что мне кажется, это выглядит симпатично.)</p>
      <p class="calibre2">
        <strong class="calibre4">Конструктор копирования</strong> (copy constructor) используется для инициализации объекта значением другого объекта того же самого типа, а <strong class="calibre4">копирующий оператор присваивания</strong> (copy assignment operator) применяется для копирования значения одного объекта в другой – того же типа:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">class Widget {</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">public:</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget(); // конструктор по умолчанию</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget(const Widget&amp; rhs); // конструктор копирования</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget&amp; operator=(const Widget&amp; rhs); // копирующий оператор присваивания</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">...</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">};</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget w1; // вызов конструктора по умолчанию</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget w2(w1); // вызов конструктора копирования</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">w1 = w2; // вызов оператора присваивания</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// копированием</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Будьте внимательны, когда видите конструкцию, похожую на присваивание, потому что синтаксис «=» также может быть использован для вызова конструктора копирования:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">Widget w3 = w2; // вызов конструктора копирования!</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">К счастью, конструктор копирования легко отличить от присваивания. Если новый объект определяется (как w3 в последнем предложении), то должен вызываться конструктор, это не может быть присваивание. Если же никакого нового объекта не создается (как в «w1=w2»), то конструктор не применяется и это – присваивание.</p>
      <p class="calibre2">Конструктор копирования – особенно важная функция, потому что она определяет, как объект передается по значению. Например, рассмотрим следующий фрагмент:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">bool hasAcceptableQuality(Widget w);</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">...</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">Widget aWidget;</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">if (hasAcceptableQuality(aWidget)) ...</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Параметр w передается функции hasAcceptableQuality по значению, поэтому в приведенном примере вызова aWidget копируется в w. Копирование осуществляется конструктором копирования из класса Widget. Вообще передача по значению <em class="calibre5">означает</em> вызов конструктора копирования. (Но, строго говоря, передавать пользовательские типы по значению – плохая идея. Обычно лучший вариант – передача по ссылке на константу, подробности см. в правиле 20.)</p>
      <p class="calibre2">
        <strong class="calibre4">STL</strong> – стандартная библиотека шаблонов (Standard Template Library) – это часть стандартной библиотеки, касающаяся контейнеров (то есть vector, list, set, map и т. д.), итераторов (то есть vector&lt;int&gt;::iterator, set&lt;string&gt;::iterator и т. д.), алгоритмов (то есть for_each, find, sort и т. д.) и всей связанной с этим функциональности. В ней очень широко используются <strong class="calibre4">объекты-функции</strong> (function objects), то есть объекты, ведущие себя подобно функциям. Такие объекты представлены классами, в которых перегружен оператор вызова operator(). Если вы не знакомы с STL, вам понадобится, помимо настоящей книги, какое-нибудь достойное руководство, посвященное этой теме, ведь библиотека STL настолько удобна, что не воспользоваться ее преимуществами было бы непростительно. Стоит лишь начать работать с ней, и вы сами это почувствуете.</p>
      <p class="calibre2">Программистам, пришедшим к C++ от языков вроде Java или C#, может показаться странным понятие <strong class="calibre4">неопределенного поведения.</strong> По различным причинам поведение некоторых конструкций в C++ действительно не определено: вы не можете уверенно предсказать, что произойдет во время исполнения. Вот два примера такого рода:</p>
      <p class="empty-line"> </p>
      <p class="calibre2">
        <code class="calibre7">int *p = 0; // p – нулевой указатель</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">std::cout &lt;&lt; *p; // разыменование нулевого указателя</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">char name[] = “Daria” // name – массив длины 6 (не забудьте про</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// завершающий нуль!)</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">char c = name[10]; // указание неправильного индекса массива</code>
      </p>
      <p class="calibre2">
        <code class="calibre7">// порождает неопределенное поведение</code>
      </p>
      <p class="empty-line"> </p>
      <p class="calibre2">Дабы подчеркнуть, что результаты неопределенного поведения невозможно предсказать и что они могут быть весьма неприятны, опытные программисты на C++ часто говорят, что программы с неопределенным поведением могут стереть содержимое жесткого диска. Это правда: такая программа <em class="calibre5">может</em> стереть ваш жесткий диск, но может этого и не сделать. Более вероятно, что она будет вести себя по-разному: иногда нормально, иногда аварийно завершаться, а иногда – просто выдавать неправильные результаты. Мудрые программисты на C++ придерживаются правила – избегать неопределенного поведения. В этой книге во многих местах я указываю, как это сделать.</p>
      <p class="calibre2">Иной термин, который может смутить программистов, пришедших из других языков, – это <strong class="calibre4">интерфейс.</strong> В Java и. NET-совместимых языках интерфейсы являются частью языка, но в C++ ничего подобного нет, хотя в правиле 31 рассматривается некоторое приближение. Когда я использую термин «интерфейс», то обычно имею в виду сигнатуры функций, доступные члены класса («открытый интерфейс», «защищенный интерфейс», «закрытый интерфейс») или выражения, допустимые в качестве параметров типа для шаблонов (см. правило 41). То есть под интерфейсом я понимаю общую концепцию проектирования.</p>
      <p class="calibre2">Понятие <strong class="calibre4">клиент</strong> – это нечто или некто, использующий написанный вами код (обычно через интерфейсы). Так, например, клиентами функции являются ее пользователи: части кода, которые вызывают функцию (или берут ее адрес), а также люди, которые пишут и сопровождают такой код. Клиентами класса или шаблона являются части программы, использующие этот класс или шаблон, а равно программисты, которые пишут или сопровождают эти части. Когда речь заходит о клиентах, я обычно имею в виду программистов, поскольку именно они могут быть введены в заблуждение или недовольство плохо разработанным интерфейсом. Коду, который они пишут, такие эмоции недоступны.</p>
      <p class="calibre2">Возможно, вы не привыкли думать о клиентах, но я постараюсь убедить вас в необходимости облегчить им жизнь, насколько это возможно. В конце концов, вы сами – клиент программного обеспечения, которое разрабатывал кто-то другой. Ведь вы хотели бы, чтоб его авторы облегчили вам работу? Помимо того, рано или поздно вы окажетесь в положении, когда сами станете клиентом собственного кода (то есть будете использовать код, написанный вами), и тогда оцените, что при разработке интерфейсов нужно помнить об интересах клиентов.</p>
      <p class="calibre2">В этой книге я часто обращаю внимание на различие между функциями и шаблонами функций, а также между классами и шаблонами классов. Это не случайно, ведь то, что справедливо для одного, часто справедливо и для другого. В ситуациях, когда это не так, я делаю различие между классами, функциями и шаблонами, из которых порождаются классы и функции.</p>
    </div>
  </div>

{% endraw %}

